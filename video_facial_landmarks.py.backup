# import the necessary packages
from imutils.video import VideoStream
from imutils import face_utils
from PIL import Image
import datetime
import imageio
import argparse
import imutils
import time
import dlib
import cv2
import PIL

# constructing the argument parse and parsing the command line arguments
ap = argparse.ArgumentParser()
ap.add_argument("-p", "--shape-predictor",
	help = "path to facial landmark detector",default = 'shape_predictor_68_face_landmarks.dat')
ap.add_argument("-r", "--picamera", type = int, default = -1,
	help = "wheather or not the Raspberry Pi camera should be used")
args = vars(ap.parse_args())

# landmark predictor
print("[INFO] loading facial landmark predictor...")
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(args["shape_predictor"])
# initialize the video stream and allow the camera sensor to warm-up
print("[INFO] camera sensor warming up...")
vs = VideoStream(usePiCamera = args["picamera"] > 0).start()
# time.sleep(1.0)
# loop over the frames from the video stream
while True:
	# grayscale
	frame = vs.read()
	# resize the frames to custom res
	frame = imutils.resize(frame, width = 500)
	# set RGB to graycolor
	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	# detect faces in the grayscale frame
	rects = detector(gray, 0)
	#loop over the face detections
	for rect in rects:
		# determine the facial landmarks for the face region, then convert the
		# facial landmark (x, y)-coordinates to a NumPy array
		shape = predictor(gray, rect)
		shape = face_utils.shape_to_np(shape)
		# loop over the (x, y)-coordinates for the facial landmarks and draw
		# them on the image
		for (x, y) in shape:
			cv2.circle(frame, (x, y), 1, (0, 255, 255), -1)
			cv2.imwrite('/test_images/test_'+str(x)+'_'+str(y)+'.jpg',frame)
	#show the frame
	cv2.imshow("Frame", frame)
	key = cv2.waitKey(20) 
	#if the 'q' key was pressed, break from the loop
	if key == ord("q"):
		cv2.imwrite('final.jpg',frame)
		break
# Finally we destroy the session with the cam stream
cv2.destroyAllWindows()
vs.stop()